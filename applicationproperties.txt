spring.datasource.url=jdbc:oracle:thin:@localhost:1521/xe
spring.datasource.username=SYSTEM
spring.datasource.password=password
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.OracleDialect
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto=update


CONTROLLER!!!!!!
package com.project.retobackend.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;

import com.project.retobackend.model.Appointment;
import com.project.retobackend.repository.AppointmentRepository;

public class AppointmentController {
	
	@Autowired
	private AppointmentRepository appointmentRepository;
	
	@GetMapping("/appointments")
	public ResponseEntity<List<Appointment>> getlist(@RequestParam(required = false) Long id){
		try {
			List<Appointment> appointment = new ArrayList<Appointment>();
			if (id == null) {
				appointmentRepository.findAll().forEach(appointment::add);
			}else {
				appointmentRepository.getbyid(id).forEach(appointment::add);
			}
			
			if (appointment.isEmpty()) {
				return new ResponseEntity<>(HttpStatus.NO_CONTENT);
			}
			return new ResponseEntity<>(appointment, HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	@GetMapping("/tutorials/{id}")
	public ResponseEntity<Appointment> getbyid(@PathVariable("id") Long id) {
		Optional<Appointment> appointmentData = appointmentRepository.findById(id);

		if (appointmentData.isPresent()) {
			return new ResponseEntity<>(appointmentData.get(), HttpStatus.OK);
		} else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}
}



	@Autowired
	private AppointmentRepository appointmentRepository;
	
	@GetMapping("/appointments")
	public List <Appointment> getAllAppointments(){
		return appointmentRepository.findAll();
	}
	
	@GetMapping("/appointments/{id}")
	public ResponseEntity <Appointment> getbyid(@PathVariable(value = "id") Long id)
	throws AttributeNotFoundException {
		Appointment appointment = appointmentRepository.findById(id)
		.orElseThrow(() -> new AttributeNotFoundException("Appointment not found for this id :: " + id));
        return ResponseEntity.ok().body(appointment);
	}
	
	@PostMapping("/appointments")
	  public ResponseEntity<Appointment> createAppointment(@RequestBody Appointment appointment) {
	    /*Appointment(Long id, LocalDate date, LocalTime hour, Integer id_test, Integer id_affiliate)*/
		Appointment _appointment = appointmentRepository.save(new Appointment(appointment.getId(), appointment.getDate(), appointment.getHour(), appointment.getId_test(), appointment.getId_affiliate()));
	    
	    return new ResponseEntity<>(_appointment, HttpStatus.CREATED);
	  }
	
	{  
    "id": "5433",  
    "dateAppointment": "11/12/2022",  
    "hourAppointment": "11:15",  
    "id_test": "4000",
    "id_affiliate": "30016980"  
} 